{"version":3,"sources":["components/flipcard.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","coin","e","setState","state","loading2","checked","fetchStock","date","arguments","length","undefined","dates","pointerToThis","assertThisInitialized","console","log","market","API_Call","concat","fetch","then","response","json","data","Information","Note","alert","obj","open","high","low","close","dat2a","keys","splice","indexOf","obj2","forEach","d","key","x","ke2y","i","push","err","loading","metadata","flip","stockChartXValues_open","stockChartYValues_open","stockChartXValues_close","stockChartYValues_close","react_default","a","createElement","className","style","top","display","right","justifyContent","alignItems","dist_default","type","color","height","width","timeout","Component","FlippingCardPage","flipcard_Card","React","App","flipcard_FlippingCardPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f42ff96e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\n// import CardFront from \"./cardfront\"\r\n// import Stock from \"./Stock\"\r\nimport \"../css/card.css\"\r\n\r\nclass Card extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            metadata: {},\r\n            stockChartXValues_open: [],\r\n            stockChartYValues_open: [],\r\n            stockChartXValues_close: [],\r\n            stockChartYValues_close: [],\r\n            data: {},\r\n            flip: false,\r\n            loading: true,\r\n            err: false,\r\n            coin: \"ILS\",\r\n            checked: false,\r\n            loading2: true,\r\n            dates: []\r\n        }\r\n\r\n    }\r\n    coin = e => {\r\n\r\n        this.setState((state) => {\r\n            return { loading2: true, checked: !this.state.checked, coin: state.coin === \"ILS\" ? \"USD\" : \"ILS\" }\r\n        }\r\n            , () => this.fetchStock())\r\n\r\n    }\r\n    componentDidMount() {\r\n        // this.fetchStock();\r\n    }\r\n    fetchStock = (date = this.state.dates) => {\r\n        const pointerToThis = this;\r\n        console.log(pointerToThis);\r\n        const API_KEY = 'HGJWFG4N8AQ66ICD'; //'F41ON15LGCFM4PR7';// \"9V66ST5SY883CWI1\"//\"GPT5COX9H2LGBQ8Y\"//\r\n        let StockSymbol = 'BTC';\r\n        let market = this.state.coin;\r\n        let API_Call = `https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol=${StockSymbol}&market=${market}&outputsize=compact&apikey=${API_KEY}`;\r\n\r\n        fetch(API_Call)\r\n            .then(\r\n                function (response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function (data) {\r\n                    console.log(data);\r\n                    if (data.Information || data.Note) {\r\n                        alert(data.Information || data.Note)\r\n                        return\r\n                    }\r\n                    let coin = pointerToThis.state.coin\r\n                    const obj = {\r\n                        dates: [],\r\n                        open: [],\r\n                        high: [],\r\n                        low: [],\r\n                        close: [],\r\n                    }\r\n                    if (!date.length) {\r\n\r\n                        const keys = Object.keys(obj)\r\n                        var x = (key) => {\r\n                            [`1a. open (${coin})`, `2a. high (${coin})`, `3a. low (${coin})`, `4a. close (${coin})`].forEach((ke2y, i) => {\r\n                                ke2y = data['Time Series (Digital Currency Daily)'][key][ke2y]\r\n                                obj[keys[i + 1]].push(ke2y)\r\n                            });\r\n\r\n                        }\r\n\r\n                        for (var key in data['Time Series (Digital Currency Daily)']) {\r\n                            obj.dates.push(key);\r\n                            x(key)\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n\r\n                        if (data['Time Series (Digital Currency Daily)'][date[0]]) {\r\n                            let dat2a = data['Time Series (Digital Currency Daily)']\r\n                            let dates = Object.keys(dat2a)\r\n                            dates.splice(dates.indexOf(date[0]) + 1, dates.length);\r\n                            console.log(dat2a)\r\n                            dates.splice(0, dates.indexOf(date[1]) - 1);\r\n                            console.log(dat2a)\r\n                            let obj2 = {}\r\n                            dates.forEach((d) => {\r\n                                obj2[d] = data['Time Series (Digital Currency Daily)'][d]\r\n                            })\r\n\r\n                            let keys = Object.keys(obj)\r\n                            x = (key) => {\r\n                                [`1a. open (${coin})`, `2a. high (${coin})`, `3a. low (${coin})`, `4a. close (${coin})`]\r\n                                    .forEach((ke2y, i) => {\r\n                                        ke2y = obj2[key][ke2y]\r\n                                        obj[keys[i + 1]].push(ke2y)\r\n                                    });\r\n\r\n                            }\r\n                            for (key in obj2) {\r\n                                obj.dates.push(key);\r\n                                x(key)\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            pointerToThis.setState({ err: true })\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    if (obj.dates.length) {\r\n                        pointerToThis.setState({\r\n                            loading2: false,\r\n                            err: false,\r\n                            loading: false,\r\n                            metadata: data['Meta Data'],\r\n                            data: obj,\r\n                            dates: date\r\n\r\n                        });\r\n\r\n                    }\r\n                    else {\r\n                        pointerToThis.setState({ err: true })\r\n                    }\r\n                }\r\n            )\r\n\r\n    }\r\n    flip = e => {\r\n\r\n        this.setState({ flip: !this.state.flip }, () => console.log(this.state.flip))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.loading ?\r\n                <div className=\"poster-container\" style={{\r\n                    top: \"20px\",\r\n                    display: \"flex\",\r\n                    right: \"12px\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                }}>\r\n                    <Loader\r\n                        type=\"Circles\"\r\n                        color=\"#ff9800\"\r\n                        height={300}\r\n                        width={300}\r\n                        timeout={5000}\r\n                    />\r\n                </div>\r\n                :\r\n                <div className=\" container \">\r\n\r\n                    <div className={this.state.flip ? \"poster flipped\" : \"poster\"}>\r\n\r\n                        <div className=\" pb-4 pic\">\r\n\r\n                            {/* <CardFront\r\n                                coin={this.coin}\r\n                                err={this.state.err}\r\n                                metadata={this.state.metadata}\r\n                                flip={this.flip}\r\n                                fetchStock={this.fetchStock}\r\n                                checked={this.state.checked}\r\n                            /> */}\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"back container pic \">\r\n                            {/* <Stock\r\n                                flip={this.flip}\r\n                                coin={this.coin}\r\n                                checked={this.state.checked}\r\n                                loading={this.state.loading2}\r\n                                data={this.state.data}\r\n                            /> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class FlippingCardPage extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"container \">\r\n                <Card />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//  FlippingCardPage;","import React from 'react';\nimport FlippingCardPage from './components/flipcard';\nimport './css/App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass App extends React.Component {\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <FlippingCardPage />\n      </div>\n    );\n  }\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}